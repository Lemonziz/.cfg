export PATH=/opt/homebrew/bin:$PATH
export PATH=/opt/homebrew/opt/openvpn/sbin:$PATH
if [[ -d "/Applications/MATLAB_R2024b.app/bin" ]]; then
    export PATH=/Applications/MATLAB_R2024b.app/bin:$PATH
fi
if [[ -d "/Users/ziqi/Applications/samiam" ]]; then
    export PATH=/Users/ziqi/Applications/samiam:$PATH

fi

# export for react native
export HADOOP_HOME="/opt/homebrew/Cellar/hadoop/3.4.1/libexec"
export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools

# Set up the user name
export PATH=/opt/homebrew/bin:$PATH
export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad
alias ls='ls --color=auto'
export PS1='%1~%F{yellow}$ %f'

# Source all the zsh plugins from .cfg/zsh_plugins/*
source "$HOME/.cfg/zsh_plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh"
# Load fzf after init, this line is neccessary. If not included ctrl-R for insert mode of vi-mode will not work.
function zvm_after_init() {
    [ -f "$HOME"/.fzf.zsh ] && source "$HOME"/.fzf.zsh
    eval $("$HOME"/.cfg/cfgfiles/fzf/bin/fzf --zsh)
}
source "$HOME/.cfg/zsh_plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
source "$HOME/.cfg/zsh_plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
# Color for vim
source "$HOME/.cfg/cfgfiles/vim/plugged/gruvbox/gruvbox_256palette.sh"

# Disable Highlight with underline
# (( ${+ZSH_HIGHLIGHT_STYLES} )) || typeset -A ZSH_HIGHLIGHT_STYLES
export ZSH_HIGHLIGHT_STYLES[path]=none
# ZSH_HIGHLIGHT_STYLES[path_prefix]=none
# # Accept Widgets for ZSH Autosuggestion Using Vim word foward key
# ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(vi-forward-char)
# # Partial Accept Widgets for ZSH Autosuggestion Using Vim word foward key
# ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(vi-forward-word vi-forward-word-end)
# Vim key binding
# Color for vim
source "$HOME/.cfg/cfgfiles/vim/plugged/gruvbox/gruvbox_256palette.sh"
# Set up fzf key bindings and fuzzy completion
setopt extended_glob

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
export PATH="/usr/local/Astrill:$PATH"
export PATH="$HOME/.local/bin:$PATH"

export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
export PATH="/opt/homebrew/opt/postgresql@15/bin:$PATH"
# For compilers to find postgresql@15 you may need to set:
export LDFLAGS="-L/opt/homebrew/opt/postgresql@15/lib"
export CPPFLAGS="-I/opt/homebrew/opt/postgresql@15/include"

# For pkg-config to find postgresql@15 you may need to set:
export PKG_CONFIG_PATH="/opt/homebrew/opt/postgresql@15/lib/pkgconfig"

[ -f ~/.fzf.zsh ] && source "$HOME"/.fzf.zsh

[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2>/dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/.miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/.miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/.miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
